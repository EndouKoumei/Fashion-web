import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import axiosClient from '../../../api/axiosClient';
import './paySection.css'

function PaySection() {
    const location = useLocation();
    const navigate = useNavigate();
    const [orderItems, setOrderItems] = useState(location.state?.items || []);
    const [shippingInfo, setShippingInfo] = useState({
        phone: '',
        address: ''
    });
    const [discounts, setDiscounts] = useState({});

    // Fetch th√¥ng tin ng∆∞·ªùi d√πng khi component mount
    useEffect(() => {
        const fetchUserInfo = async () => {
            try {
                const response = await axiosClient.get('/NguoiDungHienTai');
                setShippingInfo({
                    phone: response.data.soDienThoai || '',
                    address: response.data.diaChi || ''
                });
            } catch (error) {
                console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
            }
        };
        fetchUserInfo();
    }, []);

    // Add new effect to fetch discounts
    useEffect(() => {
        const fetchDiscounts = async () => {
            try {
                const discountPromises = orderItems.map(item =>
                    axiosClient.get(`/maDuocChon?danhmuc_id=${item.danhMucID}`)
                );
                const responses = await Promise.all(discountPromises);

                const discountMap = {};
                responses.forEach((response, index) => {
                    if (response.data) {
                        discountMap[orderItems[index].danhMucID] = response.data;
                    }
                });
                setDiscounts(discountMap);
            } catch (error) {
                console.error('L·ªói khi l·∫•y m√£ gi·∫£m gi√°:', error);
            }
        };
        if (orderItems.length > 0) {
            fetchDiscounts();
        }
    }, [orderItems]);

    const handleSubmitOrder = async () => {
        try {
            // T√°ch th√†nh m·∫£ng ri√™ng ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª±
            const dsspArr = orderItems.map(item => item.id);
            const slspArr = orderItems.map(item => item.soLuong);

            // T·∫°o FormData v√† th√™m theo ƒë√∫ng th·ª© t·ª±
            const formData = new FormData();

            // Th√™m c√°c dssp tr∆∞·ªõc
            dsspArr.forEach(id => {
                formData.append('dssp', id);
            });

            // Sau ƒë√≥ th√™m c√°c slsp
            slspArr.forEach(soLuong => {
                formData.append('slsp', soLuong);
            });

            // Cu·ªëi c√πng th√™m th√¥ng tin giao h√†ng
            formData.append('so_dien_thoai', shippingInfo.phone.replace(/[^0-9]/g, ''));
            formData.append('dia_chi', shippingInfo.address);

            // Log ƒë·ªÉ ki·ªÉm tra th·ª© t·ª±
            for (let pair of formData.entries()) {
                console.log(pair[0], ':', pair[1]);
            }

            await axiosClient.post('/dat_hang', formData);
            alert('ƒê·∫∑t h√†ng th√†nh c√¥ng!');
            navigate('/orders');
        } catch (error) {
            console.error('Chi ti·∫øt l·ªói:', error.response?.data || error.message);
            alert('ƒê·∫∑t h√†ng th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i');
        }
    };

    const handleQuantityChange = (index, change) => {
        setOrderItems(prev => prev.map((item, idx) => {
            if (idx === index) {
                const newQuantity = Math.max(1, item.soLuong + change);
                return { ...item, soLuong: newQuantity };
            }
            return item;
        }));
    };

    const calculateDiscountedPrice = (item) => {
        const discount = discounts[item.danhMucID];
        if (discount && new Date(discount.ngayHetHan) > new Date() && discount.soLuotConLai > 0) {
            return item.gia * (1 - discount.phanTramGiamGia / 100);
        }
        return item.gia;
    };

    const calculateTotal = () => {
        return orderItems.reduce((sum, item) => {
            const discountedPrice = calculateDiscountedPrice(item);
            return sum + (discountedPrice * item.soLuong);
        }, 0);
    };

    return (
        <>
            <div className="pay-section">
                {/* ƒê·ªãa ch·ªâ nh·∫≠n h√†ng */}
                <div className="shipping-info">
                    <div className="shipping-icon">üìç</div>
                    <div className="shipping-details">
                        <p className="label">ƒê·ªãa Ch·ªâ Nh·∫≠n H√†ng</p>
                        <input
                            type="text"
                            className="shipping-phone"
                            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                            value={shippingInfo.phone}
                            onChange={(e) => setShippingInfo({ ...shippingInfo, phone: e.target.value })}
                        />
                        <input
                            type="text"
                            className="shipping-address"
                            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n h√†ng"
                            value={shippingInfo.address}
                            onChange={(e) => setShippingInfo({ ...shippingInfo, address: e.target.value })}
                        />
                    </div>

                </div>

                <div className="pay-header">
                    <h2>Thanh To√°n</h2>
                    <p>Vui l√≤ng ki·ªÉm tra th√¥ng tin ƒë∆°n h√†ng tr∆∞·ªõc khi thanh to√°n</p>
                </div>

                <div className="pay-content">
                    <div className="product-table">

                        <table>
                            <thead>
                                <tr>
                                    <th>S·∫£n ph·∫©m</th>
                                    <th>ƒê∆°n gi√°</th>
                                    <th>S·ªë l∆∞·ª£ng</th>
                                    <th>Th√†nh ti·ªÅn</th>
                                </tr>
                            </thead>
                            <tbody>
                                {orderItems.map((item, index) => (
                                    <tr key={item.id}>
                                        <td className="product-info">
                                            <img src={item.sourceHinhAnh} alt={item.tenSanPham} />
                                            <div className="product-details">

                                                <div className="product-name">{item.tenSanPham}</div>
                                                {discounts[item.danhMucID] && (
                                                    <div className="discount-info">
                                                        <span className="discount-code">
                                                            M√£: {discounts[item.danhMucID].ma}
                                                        </span>
                                                        <span className="discount-percent">
                                                            -{discounts[item.danhMucID].phanTramGiamGia}%
                                                        </span>
                                                    </div>
                                                )}
                                            </div>
                                        </td>
                                        <td>
                                            <div className="price-container">
                                                <span className="original-price">
                                                    {item.gia.toLocaleString()}‚Ç´
                                                </span>
                                                {discounts[item.danhMucID] && (
                                                    <span className="discounted-price">
                                                        {calculateDiscountedPrice(item).toLocaleString()}‚Ç´
                                                    </span>
                                                )}
                                            </div>
                                        </td>
                                        <td>
                                            <div className="quantity-control">
                                                <button
                                                    className="quantity-btn"
                                                    onClick={() => handleQuantityChange(index, -1)}
                                                >
                                                    -
                                                </button>
                                                <span className="quantity-display">{item.soLuong}</span>
                                                <button
                                                    className="quantity-btn"
                                                    onClick={() => handleQuantityChange(index, 1)}
                                                >
                                                    +
                                                </button>
                                            </div>
                                        </td>
                                        <td>
                                            {(calculateDiscountedPrice(item) * item.soLuong).toLocaleString()}‚Ç´
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>

                    <div className="pay-summary">
                        <span>T·ªïng thanh to√°n: </span>
                        <span className="pay-total">{calculateTotal().toLocaleString()}‚Ç´</span>
                    </div>
                    <div className="pay-methods">
                        <h3>Ph∆∞∆°ng Th·ª©c Thanh To√°n</h3>
                        <label className='pay-method'><input type="radio" defaultChecked name="method" /> Thanh to√°n khi nh·∫≠n h√†ng</label><br />
                        {/* <label className='pay-method'><input type="radio" name="method" /> Th·∫ª t√≠n d·ª•ng/Ghi n·ª£</label><br />
                        <label className='pay-method'><input type="radio" name="method" /> V√≠ ƒëi·ªán t·ª≠</label> */}
                    </div>
                </div>



                <button
                    className="btn btn-primary pay-btn"
                    onClick={handleSubmitOrder}
                >
                    ƒê·∫∑t H√†ng
                </button>
            </div>
        </>
    )
}

export default PaySection